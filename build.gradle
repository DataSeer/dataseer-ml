buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath group: 'net.researchgate', name: 'gradle-release', version: '2.6.0'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.4.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.0.0'
        classpath "gradle.plugin.org.gretty:gretty:2.3.1"
    }
}


apply plugin: 'maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'org.gretty'

group = "org.grobid"
version = '0.6.2-SNAPSHOT'

description = """dataseer-ml"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
        url new File(rootProject.rootDir, "lib")
    }
}

ext {
    // treating them separately, these jars will be flattened into grobid-core.jar on installing,
    // to avoid missing dependencies from the projects that include grobid-core (see 'jar' taskin grobid-core)
    localLibs = ['org/dkpro/statistics/dkpro-statistics-agreement/2.2.0-SNAPSHOT/dkpro-statistics-agreement-2.2.0-SNAPSHOT.jar']
}

dependencies {

    // packaging local libs inside output jar
    compile fileTree(dir: new File(rootProject.rootDir, 'lib'), include: localLibs)

    //Grobid
    compile group: 'org.grobid', name: 'grobid-core', version: '0.6.2-SNAPSHOT'
    compile group: 'org.grobid', name: 'grobid-trainer', version: '0.6.2-SNAPSHOT'

    //Logging
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.25'

    //Apache commons
    compile group: 'commons-pool', name: 'commons-pool', version: '1.4'
    compile group: 'commons-io', name: 'commons-io', version: '2.5'
    compile group: 'commons-logging', name: 'commons-logging', version: '1.1.1'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.6'
    compile group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.5.6'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0.1'
    compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.1'
    compile group: 'org.apache.commons', name: 'commons-csv', version: '1.6'

    compile group: 'com.google.guava', name: 'guava', version: '16.0.1'

    //Parsing xml/json
    compile 'org.codehaus.woodstox:stax2-api:3.1.4'
    compile 'com.fasterxml.woodstox:woodstox-core:5.0.3'
    compile 'com.fasterxml.jackson.core:jackson-core:2.9.0'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.9.0'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.0'
    //compile group: 'xom', name: 'xom', version: '1.2.5'
    //compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.2.11'
    //compile group: 'com.sun.xml.bind', name: 'jaxb-core', version: '2.2.11'
    //compile group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '2.2.11'

    //Web interface
    compile 'org.glassfish.jersey.media:jersey-media-multipart:2.27'
    compile 'org.glassfish.jersey.inject:jersey-hk2:2.27'
    compile 'org.glassfish.jersey.containers:jersey-container-grizzly2-servlet:2.27'
    compile 'org.glassfish.jersey.containers:jersey-container-servlet-core:2.27'
    compile 'org.glassfish.jersey.core:jersey-client:2.27'
    compile 'javax.ws.rs:javax.ws.rs-api:2.1'
    compile 'javax.servlet:javax.servlet-api:3.1.0'

    compile 'javax.activation:activation:1.1.1'

    compile 'org.jvnet.mimepull:mimepull:1.6'
    compile 'net.arnx:jsonic:1.3.5'

    providedCompile group: 'javax.servlet', name: 'servlet-api', version: '2.4'
    providedCompile group: 'javax.servlet.jsp', name: 'jsp-api', version: '2.0'
    compile group: 'asm', name: 'asm', version: '3.3.1'
    compile group: 'org.jvnet', name: 'mimepull', version: '1.6'
    compile group: 'com.sun.jersey.contribs', name: 'jersey-multipart', version: '1.8'
    compile group: 'javax.ws.rs', name: 'jsr311-api', version: '1.1.1'

    // for sentence segmentation only
    //compile 'com.googlecode.clearnlp:clearnlp:1.3.1'
    compile 'org.apache.opennlp:opennlp-tools:1.9.1'

    compile 'black.ninia:jep:3.8.2'

    //Tests
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
}

configurations {
    compile.exclude group: "org.slf4j", module: "slf4j-jdk14"
}

configurations.all {
    resolutionStrategy {
        force 'xml-apis:xml-apis:1.4.01'
    }
}

test {
    exclude '**/**IntegrationTest**'
}

// Gretty configuration
gretty {
    httpPort = 8060
    contextPath = '/'
    servletContainer = "jetty9.4"
    webInfIncludeJarPattern = ''
    reloadOnClassChange = false
}

// return the default value if the property has not been specified in command line
ext.getArg = { propName, defaultVal ->
    return project.hasProperty(propName) ? project.getProperty(propName) : defaultVal;
}

war {
    classifier = 'war'
    enabled true

    from {
        project.configurations.compile.collect {
            it.isDirectory() ? [] : localLibs.contains(it.getName()) ? zipTree(it) : []
        }
    }
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

task mainJar(type: ShadowJar, group: 'test') {
    zip64 true
    from sourceSets.main.output

    from {
        project.configurations.compile.collect {
            it.isDirectory() ? [] : localLibs.contains(it.getName()) ? zipTree(it) : []
        }
    }
}

shadowJar {
    classifier = 'onejar'
    zip64 true
    manifest {
        attributes 'Main-Class': 'org.grobid.core.main.batch.DataseerMain'
    }

    from {
        project.configurations.compile.collect {
            it.isDirectory() ? [] : localLibs.contains(it.getName()) ? zipTree(it) : []
        }
    }
}

jar {
    dependsOn mainJar
    enabled false
}



artifacts {
    archives jar
    archives shadowJar
    archives war
}

//task copyModels(type: Copy) {
//    from "${rootDir}/resources/model"
//    include "*.wapiti"
//    into "${rootDir}/../grobid-home/models/dataseer/"
//}

//tasks.withType(JavaCompile) {
//    options.compilerArgs << "-Xlint:deprecation"
//    options.compilerArgs << "-Xlint:unchecked"
//}


wrapper {
    gradleVersion "5.4.1"
}

// Custom Tasks

// Run like this: ./gradlew train_dataseer -PgH=/path/grobid/home
task(train_dataseer, dependsOn: 'classes', type: JavaExec, group: 'training') {
    main = 'org.grobid.trainer.DataseerTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args '0', 'dataseer', getArg('gH', '../grobid-home'), getArg('t', '0')
//    jvmArgs '-Xms2g', '-Xmx8g'
}

// Run like this: ./gradlew train_dataseer -PgH=/path/grobid/home
//task(train_dataseer, dependsOn: 'classes', type: JavaExec, group: 'training') {
//    main = 'org.grobid.trainer.DataseerTrainer'
//    classpath = sourceSets.main.runtimeClasspath
//    args '0', 'dataseer', getArg('gH', '../grobid-home'), getArg('b', ''),
//    jvmArgs '-Xms2g', '-Xmx8g'
//}

// Run like this: ./gradlew eval_dataseer -PgH=/path/grobid/home
task(eval_dataseer, dependsOn: 'classes', type: JavaExec, group: 'evaluation') {
    main = 'org.grobid.trainer.DataseerTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args '1', 'dataseer', getArg('gH', '../grobid-home')
//    jvmArgs '-Xms2g', '-Xmx8g'
}

// Run like this: ./gradlew eval_dataseer_split -PgH=/path/grobid/home -Ps=0.8 -Pt=10
task(eval_dataseer_split, dependsOn: 'classes', type: JavaExec, group: 'evaluation') {
    main = 'org.grobid.trainer.DataseerTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args '2', 'dataseer', getArg('gH', '../grobid-home'), getArg('s', 0.9), getArg('t', '0')
    jvmArgs '-Xms2g', '-Xmx8g'
}

// Run like this: ./gradlew eval_dataseer_nfold -PgH=/path/grobid/home -Pt=10
task(eval_dataseer_nfold, dependsOn: 'classes', type: JavaExec, group: 'evaluation') {
    main = 'org.grobid.trainer.DataseerTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args '3', 'dataseer', getArg('gH', '../grobid-home'), getArg('n', 10), getArg('t', '0')
    jvmArgs '-Xms2g', '-Xmx8g'
}

// Run like this: ./gradlew annotated_corpus_generator_csv -Pfull=/path/input/fulltext -Ppdf=/path/input/pdf -Pcsv=/path/csv -Pxml=/output/directory
task(annotated_corpus_generator_csv, dependsOn: 'classes', type: JavaExec, group: 'import') {
    main = 'org.grobid.trainer.AnnotatedCorpusGeneratorCSV'
    classpath = sourceSets.main.runtimeClasspath
    args getArg('full', ''), getArg('pdf', ''), getArg('csv', ''), getArg('xml', 'resources/dataset/dataseer/corpus/')
    jvmArgs '-Xms2g', '-Xmx8g'
}

